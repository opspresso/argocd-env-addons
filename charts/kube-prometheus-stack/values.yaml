kube-prometheus-stack:
  fullnameOverride: prometheus

  # commonLabels:
  #   owner: "{{cluster}}"
  #   department: "addons"

  prometheusOperator:
    tolerations:
      - key: group
        operator: Equal
        value: monitoring
        effect: NoSchedule
    nodeSelector:
      group: monitoring

  prometheus:
    enabled: true

    prometheusSpec:
      # podMetadata:
      #   labels:
      #     owner: "{{cluster}}"
      #     department: "addons"
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: gp3 # aws-ebs-sc
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi

      resources:
        requests:
          cpu: "500m"
          memory: 2Gi
        limits:
          cpu: "2"
          memory: 6Gi

      tolerations:
        - key: group
          operator: Equal
          value: monitoring
          effect: NoSchedule
      nodeSelector:
        group: monitoring

  alertmanager:
    enabled: false

    config:
      route:
        receiver: "slack"
        routes:
          - match:
              alertname: Watchdog
            receiver: "slack"

      receivers:
        - name: "null"
        - name: "slack"
          slack_configs:
            - channel: '#sandbox'
              api_url_file: /etc/alertmanager/secrets/prometheus-alertmanager-secret/slack-hooks
              color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
              icon_url: https://avatars3.githubusercontent.com/u/3380462
              send_resolved: true

              title: "{{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}"
              text: "{{ range .Alerts }}{{ .Annotations.description }}\n{{ end }}"

              # title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
              # text: |
              #   {{ range .Alerts }}
              #   *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
              #   *Cluster:* `{{cluster}}`
              #   *Description:* {{ .Annotations.description }}
              #   *Details:*
              #     {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* {{ .Value }}
              #     {{ end }}
              #   {{ end }}

    alertmanagerSpec:
      secrets:
        - prometheus-alertmanager-secret

      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: gp3 # aws-ebs-sc
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi

      resources:
        requests:
          cpu: "200m"
          memory: 512Gi
        limits:
          cpu: "1"
          memory: 2Gi

      tolerations:
        - key: group
          operator: Equal
          value: monitoring
          effect: NoSchedule
      nodeSelector:
        group: monitoring
        # topology.kubernetes.io/zone: {{aws_region}}c

  kube-state-metrics:
    fullnameOverride: kube-state-metrics

    # customLabels:
    #   owner: "{{cluster}}"
    #   department: "addons"

    # https://github.com/kubernetes/kube-state-metrics/blob/master/docs/cli-arguments.md
    extraArgs:
      - --metric-labels-allowlist=nodes=[*],namespaces=[*],deployments=[*],pods=[*],services=[*]

    tolerations:
      - key: group
        operator: Equal
        value: monitoring
        effect: NoSchedule
    nodeSelector:
      group: monitoring

  prometheus-node-exporter:
    fullnameOverride: prometheus-node-exporter

    # podLabels:
    #   owner: "{{cluster}}"
    #   department: "addons"

    # image:
    #   repository: {{prometheus.node-exporter.image.registry}}/{{prometheus.node-exporter.image.repository}}

  kubelet:
    serviceMonitor:
      relabelings:
        - action: replace
          sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
      cAdvisorRelabelings:
        - action: replace
          sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
      probesRelabelings:
        - action: replace
          sourceLabels: [__metrics_path__]
          targetLabel: metrics_path

  grafana:
    enabled: false

raw:
  resources:
    - apiVersion: external-secrets.io/v1beta1
      kind: ExternalSecret
      metadata:
        name: prometheus-alertmanager-secret
      spec:
        refreshInterval: 1h
        secretStoreRef:
          kind: ClusterSecretStore
          name: parameter-store
        target:
          name: prometheus-alertmanager-secret
        data:
          - secretKey: slack-hooks
            remoteRef:
              key: /k8s/common/slack-hooks

    # - apiVersion: monitoring.coreos.com/v1
    #   kind: PrometheusRule
    #   metadata:
    #     labels:
    #       release: prometheus-{{cluster}}
    #     name: istio-recording-rules
    #   spec:
    #     groups:
    #     - name: "istio-recording-rules"
    #       interval: 5s
    #       rules:
    #       - record: "workload:istio_requests_total"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_requests_total)"

    #       - record: "workload:istio_request_duration_milliseconds_count"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_duration_milliseconds_count)"
    #       - record: "workload:istio_request_duration_milliseconds_sum"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_duration_milliseconds_sum)"
    #       - record: "workload:istio_request_duration_milliseconds_bucket"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_duration_milliseconds_bucket)"

    #       - record: "workload:istio_request_bytes_count"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_count)"
    #       - record: "workload:istio_request_bytes_sum"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_sum)"
    #       - record: "workload:istio_request_bytes_bucket"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_bucket)"

    #       - record: "workload:istio_response_bytes_count"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_count)"
    #       - record: "workload:istio_response_bytes_sum"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_sum)"
    #       - record: "workload:istio_response_bytes_bucket"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_bucket)"

    #       - record: "workload:istio_tcp_connections_opened_total"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_connections_opened_total)"
    #       - record: "workload:istio_tcp_connections_closed_total"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_connections_closed_total)"

    #       - record: "workload:istio_tcp_sent_bytes_total_count"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_sent_bytes_total_count)"
    #       - record: "workload:istio_tcp_sent_bytes_total_sum"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_sent_bytes_total_sum)"
    #       - record: "workload:istio_tcp_sent_bytes_total_bucket"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_sent_bytes_total_bucket)"

    #       - record: "workload:istio_tcp_received_bytes_total_count"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_received_bytes_total_count)"
    #       - record: "workload:istio_tcp_received_bytes_total_sum"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_received_bytes_total_sum)"
    #       - record: "workload:istio_tcp_received_bytes_total_bucket"
    #         expr: "sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_received_bytes_total_bucket)"

    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          # release: prometheus-{{cluster}}
        name: prometheus-alert-rules
      spec:
        groups:
          - name: InstanceCountChanged
            rules:
              - alert: InstanceCountChanged
                expr: count(kube_node_labels{node=~"^.*$"}) - count(kube_node_labels{node=~"^.*$"} offset 2m) != 0
                labels:
                  severity: Warning
                annotations:
                  summary: "Instance Count Changed"
                  description: "The number of instances has changed. (delta: {{ $value }})"

          - name: InstanceDown
            rules:
              - alert: InstanceDown
                expr: up{job="kubernetes-nodes"} == 0
                labels:
                  severity: Warning
                annotations:
                  summary: "Instance Down"
                  description: "The instance({{ $labels.instance }}) is down."

          - name: HighCpuUsage
            rules:
              - alert: HighCpuUsage
                expr: 100 - (avg by (instance) (irate(node_cpu_seconds_total{job="kubernetes-service-endpoints",mode="idle"}[5m])) * 100) > 70
                for: 5m
                labels:
                  severity: Warning
                annotations:
                  summary: "High CPU Usage(> 70%)"
                  description: "The CPU usage of the instance({{ $labels.instance }}) has exceeded 70 percent for more than 5 minutes."

          - name: HighMemoryUsage
            rules:
              - alert: HighMemoryUsage
                expr: (node_memory_MemTotal_bytes - node_memory_MemFree_bytes - node_memory_Buffers_bytes - node_memory_Cached_bytes) / node_memory_MemTotal_bytes * 100 > 90
                for: 5m
                labels:
                  severity: Warning
                annotations:
                  summary: "High Memory Usage(> 90%)"
                  description: "The memory usage of the instance({{ $labels.instance }}) has exceeds 90 percent for more than 5 minutes."

          - name: PodCrashingLooping
            rules:
              - alert: PodCrashingLooping
                expr: round(increase(kube_pod_container_status_restarts_total[30m])) > 0
                for: 5m
                labels:
                  severity: Critical
                annotations:
                  summary: "Pod Crash Looping(> 30m)"
                  description: "Namespace : {{ $labels.namespace }} Pod : {{ $labels.pod }} -- crash {{ $value }} times"

          - name: KubeNodeNotReady
            rules:
              - alert: KubeNodeNotReady
                expr: kube_node_status_condition{job="kubernetes-service-endpoints",condition="Ready",status="true"} == 0
                for: 5m
                labels:
                  severity: Critical
                annotations:
                  summary: "Kube Node Fail :  {{ $labels.condition }}"
                  description: "Node {{ $labels.node }} is failed. Check node!!"

          - name: AvgResponseTime
            rules:
              - alert: AvgResponseTime
                expr: (sum(rate(nginx_ingress_controller_response_duration_seconds_sum[5m])) by (host) != 0) / (sum(rate(nginx_ingress_controller_response_duration_seconds_count[5m])) by (host) != 0) > 5
                for: 5m
                labels:
                  severity: Warning
                annotations:
                  summary: "Average Response Time(> 5s)"
                  description: "{{ $labels.host }}'s Average Response Time is over 5sec."

          - name: HPAMaxUsage
            rules:
              - alert: HPAMaxUsage
                expr: (kube_hpa_status_current_replicas) / (kube_hpa_spec_max_replicas != 1) == 1
                for: 5m
                labels:
                  severity: Warning
                annotations:
                  summary: "HPA Max Usage"
                  description: "{{ $labels.hpa }} is using HPA Max."
