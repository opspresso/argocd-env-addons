istiod:
  global:
    hub: gcr.io/istio-release

    proxy:
      startupProbe:
        enabled: true

      lifecycle:
        postStart:
          exec:
            command:
              - pilot-agent
              - wait

  env:
    EXCLUDE_UNSAFE_503_FROM_DEFAULT_RETRY: "false"
    ENABLE_100_CONTINUE_HEADERS: "false"

  autoscaleEnabled: false

  serviceAnnotations:
    service.kubernetes.io/topology-aware-hints: auto

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: istiod
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: istiod

  replicaCount: 3

  resources:
    requests:
      cpu: 100m
      memory: 128Mi

  meshConfig:
    defaultConfig:
      proxyMetadata:
         EXIT_ON_ZERO_ACTIVE_CONNECTIONS: 'true'
         MINIMUM_DRAIN_DURATION: '10s'
      gatewayTopology:
        numTrustedProxies: 1
      holdApplicationUntilProxyStarts: true
      terminationDrainDuration: 30s
    enableTracing: false
    rootNamespace: istio-system
    # localityLbSetting:
    #   enabled: true

    # extensionProviders:
    #   - name: oauth2-proxy
    #     envoyExtAuthzHttp:
    #       service: "oauth2-proxy.addon-oauth2-proxy.svc.cluster.local"
    #       port: "80"
    #       headersToDownstreamOnDeny:
    #         - content-type
    #         - set-cookie
    #       headersToUpstreamOnAllow:
    #         - authorization
    #         - cookie
    #         - path
    #         - x-auth-request-access-token
    #         - x-auth-request-user
    #         - x-auth-request-email
    #         - x-forwarded-access-token
    #       includeHeadersInCheck:
    #         - cookie
    #         - x-forwarded-access-token
    #         # - x-forwarded-user
    #         # - x-forwarded-email
    #       includeAdditionalHeadersInCheck:
    #         authorization: "%REQ(x-auth-request-access-token)%"

gateway:
  name: istio-ingressgateway

  autoscaling:
    enabled: false

  labels:
    app: istio-ingressgateway
    istio: ingressgateway

  service:
    type: ClusterIP

    # externalTrafficPolicy: Local

    annotations:
      service.kubernetes.io/topology-aware-hints: auto

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: istio-ingressgateway
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: istio-ingressgateway

raw:
  resources:
    - apiVersion: v1
      kind: Service
      metadata:
        labels:
          app: istio-ingressgateway
          istio: ingressgateway
        name: istio-ingressgateway-metrics
      spec:
        ports:
          - name: http-envoy-prom
            port: 25090
            protocol: TCP
            targetPort: 15090
        selector:
          app: istio-ingressgateway
          istio: ingressgateway
        type: ClusterIP

    - apiVersion: networking.istio.io/v1alpha3
      kind: EnvoyFilter
      metadata:
        name: preserve-external-request-id
        namespace: istio-system
      spec:
        configPatches:
        - applyTo: NETWORK_FILTER
          match:
            context: ANY
            listener:
              filterChain:
                filter:
                  name: envoy.filters.network.http_connection_manager
          patch:
            operation: MERGE
            value:
              typed_config:
                "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
                preserve_external_request_id: true

    - apiVersion: networking.istio.io/v1alpha3
      kind: EnvoyFilter
      metadata:
        name: uuid-unable-trace-reason
        namespace: istio-system
      spec:
        configPatches:
        - applyTo: NETWORK_FILTER
          match:
            context: ANY
            listener:
              filterChain:
                filter:
                  name: envoy.filters.network.http_connection_manager
          patch:
            operation: MERGE
            value:
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                request_id_extension:
                  typed_config:
                    '@type': type.googleapis.com/envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig
                    pack_trace_reason: false

    # - apiVersion: monitoring.coreos.com/v1
    #   kind: ServiceMonitor
    #   metadata:
    #     labels:
    #       app: istio-ingressgateway
    #       # release: prometheus-{{cluster}}
    #     name: istio-ingressgateway-metrics
    #   spec:
    #     endpoints:
    #       - interval: 15s
    #         path: /stats/prometheus
    #         port: http-envoy-prom
    #     jobLabel: istio-ingressgateway
    #     namespaceSelector:
    #       matchNames:
    #         - istio-system
    #     selector:
    #       matchLabels:
    #         app: istio-ingressgateway
    #         istio: ingressgateway

    # - apiVersion: monitoring.coreos.com/v1
    #   kind: ServiceMonitor
    #   metadata:
    #     labels:
    #       app: istio-components
    #       # release: prometheus-{{cluster}}
    #     name: istio-components-metrics
    #   spec:
    #     endpoints:
    #       - interval: 30s
    #         metricRelabelings:
    #           - sourceLabels:
    #               - cluster
    #             targetLabel: istio_cluster
    #           - action: labeldrop
    #             regex: cluster
    #         port: http-monitoring
    #     jobLabel: istio
    #     namespaceSelector:
    #       matchNames:
    #         - istio-system
    #     selector:
    #       matchExpressions:
    #         - key: istio
    #           operator: In
    #           values:
    #             - mixer
    #             - pilot
    #             - galley
    #             - citadel
    #             - sidecar-injector
    #             - istiod

    # - apiVersion: monitoring.coreos.com/v1
    #   kind: ServiceMonitor
    #   metadata:
    #     labels:
    #       app: istio-servicemesh
    #       # release: prometheus-{{cluster}}
    #     name: istio-servicemesh-metrics
    #   spec:
    #     endpoints:
    #       - interval: 15s
    #         path: /stats/prometheus
    #         relabelings:
    #           - sourceLabels: [__meta_kubernetes_pod_container_port_name]
    #             action: keep
    #             regex: ".*-envoy-prom"
    #           - action: labeldrop
    #             regex: "__meta_kubernetes_pod_label_(.+)"
    #           - sourceLabels: [__meta_kubernetes_namespace]
    #             action: replace
    #             targetLabel: namespace
    #           - sourceLabels: [__meta_kubernetes_pod_name]
    #             action: replace
    #             targetLabel: pod_name
    #     jobLabel: istio-servicemesh
    #     namespaceSelector:
    #       any: true
    #     selector:
    #       matchExpressions:
    #         - key: istio
    #           operator: DoesNotExist
