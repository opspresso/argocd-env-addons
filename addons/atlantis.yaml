apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: atlantis
spec:
  generators:
    - git:
        repoURL: https://github.com/opspresso/argocd-env-addons.git
        revision: HEAD
        files:
          - path: "env/eks-demo.yaml"

  template:
    metadata:
      name: "atlantis" # only management cluster
      annotations:
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: noti-argocd-{{env}}-addon
      labels:
        app.kubernetes.io/instance: "addons-{{cluster}}"
        krmt.io/cluster: "{{cluster}}"
        krmt.io/group: "addons"
    spec:
      project: addons
      destination:
        name: "{{cluster}}"
        namespace: addon-atlantis
      source:
        repoURL: https://runatlantis.github.io/helm-charts
        targetRevision: "4.1.0"
        chart: atlantis
        helm:
          values: |-
            fullnameOverride: atlantis

            atlantisUrl: {{atlantis.url}}

            orgAllowlist: {{atlantis.allowlist}}

            # image:
            #   repository: ghcr.io/runatlantis/atlantis
            #   tag: v0.19.8

            # repoConfig: |
            #   ---
            #   repos:
            #   - id: /.*/
            #     apply_requirements: []
            #     workflow: default
            #     allowed_overrides: []
            #     allow_custom_workflows: false
            #   workflows:
            #     default:
            #       plan:
            #         steps: [init, plan]
            #       apply:
            #         steps: [apply]

            resources:
              requests:
                memory: 1Gi
                cpu: 200m
              limits:
                memory: 1Gi
                cpu: 200m

            storageClassName: gp3
            dataStorage: 15Gi

            service:
              type: ClusterIP

            ingress:
              enabled: false

            serviceAccount:
              annotations:
                eks.amazonaws.com/role-arn: "arn:aws:iam::{{aws_account_id}}:role/irsa--{{cluster}}--atlantis"

            loadEnvFromSecrets:
              - atlantis-secret

            loadEnvFromConfigMaps:
              - atlantis-configmap

            extraManifests:
              - apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: atlantis-configmap
                data:
                  ATLANTIS_GH_USER: {{atlantis.github.user}}
                  INFRACOST_PRICING_API_ENDPOINT: {{atlantis.pricing.url}}

              - apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                metadata:
                  name: atlantis-secret
                spec:
                  refreshInterval: 1h
                  secretStoreRef:
                    kind: ClusterSecretStore
                    name: parameter-store
                  target:
                    name: atlantis-secret
                  data:
                    - secretKey: GITHUB_TOKEN
                      remoteRef:
                        key: /k8s/common/github/{{atlantis.github.user}}/token
                    - secretKey: ATLANTIS_GH_TOKEN
                      remoteRef:
                        key: /k8s/common/github/{{atlantis.github.user}}/token
                    - secretKey: ATLANTIS_GH_WEBHOOK_SECRET
                      remoteRef:
                        key: /k8s/common/github/{{atlantis.github.user}}/secret
                    - secretKey: INFRACOST_API_KEY
                      remoteRef:
                        key: /k8s/common/infracost/self-hosted-api-key
                    - secretKey: SELF_HOSTED_INFRACOST_API_KEY
                      remoteRef:
                        key: /k8s/common/infracost/self-hosted-api-key

              - apiVersion: networking.istio.io/v1beta1
                kind: Gateway
                metadata:
                  name: atlantis
                spec:
                  selector:
                    istio: ingressgateway
                  servers:
                    - hosts:
                        - "atlantis.{{hostname.public}}"
                      port:
                        number: 80
                        name: http
                        protocol: HTTP

              - apiVersion: networking.istio.io/v1beta1
                kind: VirtualService
                metadata:
                  name: atlantis
                spec:
                  hosts:
                    - "atlantis.{{hostname.public}}"
                  gateways:
                    - atlantis
                    - mesh
                  http:
                    - route:
                        - destination:
                            host: atlantis
                            port:
                              number: 80

      syncPolicy:
        # automated:
        #   prune: true
        #   selfHeal: true
        syncOptions:
          - CreateNamespace=true
